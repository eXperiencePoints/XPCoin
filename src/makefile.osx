# -*- mode: Makefile; -*-
# Copyright (c) 2011 Bitcoin Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Mac OS X makefile for bitcoin
# Originally by Laszlo Hanyecz (solar@heliacal.net)

CXX=clang++
DEPSDIR=/usr/local/opt

# below default values is `brew --prefix xxx` result.
ifeq ($(BOOST_INCLUDE_PATH),)
BOOST_INCLUDE_PATH := "$(DEPSDIR)/boost/include"
endif
ifeq ($(BOOST_LIB_PATH),)
BOOST_LIB_PATH := "$(DEPSDIR)/boost/lib"
endif
ifeq ($(BDB_INCLUDE_PATH),)
BDB_INCLUDE_PATH := "$(DEPSDIR)/berkeley-db@4/include"
endif
ifeq ($(BDB_LIB_PATH),)
BDB_LIB_PATH := "$(DEPSDIR)/berkeley-db@4/lib"
endif
ifeq ($(OPENSSL_INCLUDE_PATH),)
OPENSSL_INCLUDE_PATH := "$(DEPSDIR)/openssl/include"
endif
ifeq ($(OPENSSL_LIB_PATH),)
OPENSSL_LIB_PATH := "$(DEPSDIR)/openssl/lib"
endif
ifeq ($(MINIUPNPC_INCLUDE_PATH),)
# todo
MINIUPNPC_INCLUDE_PATH := "$(DEPSDIR)/miniupnpc/include"
endif
ifeq ($(MINIUPNPC_LIB_PATH),)
# todo
MINIUPNPC_LIB_PATH := "$(DEPSDIR)/miniupnpc/lib"
endif
ifeq ($(QRENCODE_INCLUDE_PATH),)
# todo
QRENCODE_INCLUDE_PATH := "$(DEPSDIR)/qrencode/include"
endif
ifeq ($(QRENCODE_LIB_PATH),)
# todo
QRENCODE_LIB_PATH := "$(DEPSDIR)/qrencode/lib"
endif

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(BOOST_INCLUDE_PATH)" \
 -I"$(BDB_INCLUDE_PATH)" \
 -I"$(OPENSSL_INCLUDE_PATH)" \
 -I"$(MINIUPNPC_INCLUDE_PATH)" \
 -I"$(QRENCODE_INCLUDE_PATH)" \

LIBPATHS= \
 -L"$(BOOST_LIB_PATH)" \
 -L"$(BDB_LIB_PATH)" \
 -L"$(OPENSSL_LIB_PATH)" \
 -L"$(MINIUPNPC_LIB_PATH)" \
 -L"$(QRENCODE_LIB_PATH)"

ifeq ($(USE_LEVELDB),)
USE_LEVELDB:=0
endif
ifeq ($(USE_IPV6),)
USE_IPV6:=1
endif

LIBS= -dead_strip

ifdef STATIC
# Build STATIC if you are redistributing the bitcoind binary
LIBS += \
 $(BDB_LIB_PATH)/libdb_cxx-4.8.a
 $(BOOST_LIB_PATH)/libboost_system-mt.a \
 $(BOOST_LIB_PATH)/libboost_filesystem-mt.a \
 $(BOOST_LIB_PATH)/libboost_program_options-mt.a \
 $(BOOST_LIB_PATH)/libboost_thread-mt.a \
 $(OPENSSL_LIB_PATH)/libssl.a \
 $(OPENSSL_LIB_PATH)/libcrypto.a \
 -lz
else
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system-mt \
 -lboost_filesystem-mt \
 -lboost_program_options-mt \
 -lboost_thread-mt \
 -lssl \
 -lcrypto \
 -lz
endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -O2 -msse2 -mssse3
else
CFLAGS = -g -msse2 -mssse3
endif

# ppc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wno-ignored-qualifiers -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/base58.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/ntp.o \
    obj/stun.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/kernelrecord.o \
    obj/kernel_worker.o

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

all: XPd

#
# LevelDB support
#
ifeq ($(USE_LEVELDB), 1)
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make; cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a
else
OBJS += obj/txdb-bdb.o
endif

ifeq (${USE_ASM}, 1)
# Assembler implementation
OBJS += crypto/scrypt/asm/obj/scrypt-x86.o crypto/scrypt/asm/obj/scrypt-x86_64.o crypto/scrypt/asm/obj/asm-wrapper.o
OBJS += crypto/sha2/asm/obj/sha2-x86.o crypto/sha2/asm/obj/sha2-x86_64.o

crypto/scrypt/asm/obj/scrypt-x86.o: crypto/scrypt/asm/scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj/scrypt-x86_64.o: crypto/scrypt/asm/scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj/asm-wrapper.o: crypto/scrypt/asm/asm-wrapper.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj/sha2-x86.o: crypto/sha2/asm/sha2-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/sha2/asm/obj/sha2-x86_64.o: crypto/sha2/asm/sha2-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

DEFS += -DUSE_ASM

else
ifeq  (${USE_SSE2}, 1)
# Intrinsic implementation
DEFS += -DUSE_SSE2
OBJS += crypto/scrypt/intrin/obj/scrypt-sse2.o

crypto/scrypt/intrin/obj/scrypt-sse2.o: crypto/scrypt/intrin/scrypt-sse2.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
else
# Generic implementation
OBJS += crypto/scrypt/generic/obj/scrypt-generic.o

crypto/scrypt/generic/obj/scrypt-generic.o: crypto/scrypt/generic/scrypt-generic.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<
endif
endif


# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

XPd: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f XPd
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f crypto/scrypt/asm/obj/*.o
	-rm -f crypto/scrypt/asm/obj/*.P
	-rm -f crypto/scrypt/asm/obj/*.d
	-rm -f crypto/scrypt/intrin/obj/*.o
	-rm -f crypto/scrypt/intrin/obj/*.P
	-rm -f crypto/scrypt/intrin/obj/*.d
	-rm -f crypto/scrypt/generic/obj/*.o
	-rm -f crypto/scrypt/generic/obj/*.P
	-rm -f crypto/scrypt/generic/obj/*.d
	-rm -f crypto/sha2/asm/obj/*.o
	-rm -f crypto/sha2/asm/obj/*.P
	-rm -f crypto/sha2/asm/obj/*.d
	-rm -f obj/build.h

FORCE:
